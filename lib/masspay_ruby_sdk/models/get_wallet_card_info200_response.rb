=begin
#MassPay API

#MassPay API

The version of the OpenAPI document: 0.1.4
Contact: support@masspay.io
Generated by: MassPay Inc.
OpenAPI Generator version: 6.5.0
=end

require 'date'
require 'time'

module MassPayRubySdk
  # MassPay Card Information
  class GetWalletCardInfo200Response
    # 16 Digits card number
    attr_accessor :card_number

    # 3 Digits cvv code
    attr_accessor :cvv

    # Card expiration date
    attr_accessor :expiration_date

    # Card pin number (used in ATM machines)
    attr_accessor :pin_number

    # Available balance on the card
    attr_accessor :balance

    # Card type
    attr_accessor :type

    # Status of the card
    attr_accessor :status

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'card_number' => :'card_number',
        :'cvv' => :'cvv',
        :'expiration_date' => :'expiration_date',
        :'pin_number' => :'pin_number',
        :'balance' => :'balance',
        :'type' => :'type',
        :'status' => :'status'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'card_number' => :'Integer',
        :'cvv' => :'String',
        :'expiration_date' => :'Date',
        :'pin_number' => :'String',
        :'balance' => :'Float',
        :'type' => :'String',
        :'status' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `MassPayRubySdk::GetWalletCardInfo200Response` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `MassPayRubySdk::GetWalletCardInfo200Response`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'card_number')
        self.card_number = attributes[:'card_number']
      end

      if attributes.key?(:'cvv')
        self.cvv = attributes[:'cvv']
      end

      if attributes.key?(:'expiration_date')
        self.expiration_date = attributes[:'expiration_date']
      end

      if attributes.key?(:'pin_number')
        self.pin_number = attributes[:'pin_number']
      end

      if attributes.key?(:'balance')
        self.balance = attributes[:'balance']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = 'ACTIVE'
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @card_number.nil?
        invalid_properties.push('invalid value for "card_number", card_number cannot be nil.')
      end

      if @cvv.nil?
        invalid_properties.push('invalid value for "cvv", cvv cannot be nil.')
      end

      if @cvv.to_s.length > 3
        invalid_properties.push('invalid value for "cvv", the character length must be smaller than or equal to 3.')
      end

      if @cvv.to_s.length < 3
        invalid_properties.push('invalid value for "cvv", the character length must be great than or equal to 3.')
      end

      pattern = Regexp.new(/^[0-9]{3}$/)
      if @cvv !~ pattern
        invalid_properties.push("invalid value for \"cvv\", must conform to the pattern #{pattern}.")
      end

      if @expiration_date.nil?
        invalid_properties.push('invalid value for "expiration_date", expiration_date cannot be nil.')
      end

      if @pin_number.nil?
        invalid_properties.push('invalid value for "pin_number", pin_number cannot be nil.')
      end

      if @pin_number.to_s.length > 4
        invalid_properties.push('invalid value for "pin_number", the character length must be smaller than or equal to 4.')
      end

      if @pin_number.to_s.length < 4
        invalid_properties.push('invalid value for "pin_number", the character length must be great than or equal to 4.')
      end

      pattern = Regexp.new(/^[0-9]{4}$/)
      if @pin_number !~ pattern
        invalid_properties.push("invalid value for \"pin_number\", must conform to the pattern #{pattern}.")
      end

      if @balance.nil?
        invalid_properties.push('invalid value for "balance", balance cannot be nil.')
      end

      if @balance < 0
        invalid_properties.push('invalid value for "balance", must be greater than or equal to 0.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @card_number.nil?
      return false if @cvv.nil?
      return false if @cvv.to_s.length > 3
      return false if @cvv.to_s.length < 3
      return false if @cvv !~ Regexp.new(/^[0-9]{3}$/)
      return false if @expiration_date.nil?
      return false if @pin_number.nil?
      return false if @pin_number.to_s.length > 4
      return false if @pin_number.to_s.length < 4
      return false if @pin_number !~ Regexp.new(/^[0-9]{4}$/)
      return false if @balance.nil?
      return false if @balance < 0
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ["VISA", "MASTERCARD", "DISCOVER", "AMEX", "UNIONPAY"])
      return false unless type_validator.valid?(@type)
      return false if @status.nil?
      status_validator = EnumAttributeValidator.new('String', ["ACTIVE", "INACTIVE", "CLOSED"])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] cvv Value to be assigned
    def cvv=(cvv)
      if cvv.nil?
        fail ArgumentError, 'cvv cannot be nil'
      end

      if cvv.to_s.length > 3
        fail ArgumentError, 'invalid value for "cvv", the character length must be smaller than or equal to 3.'
      end

      if cvv.to_s.length < 3
        fail ArgumentError, 'invalid value for "cvv", the character length must be great than or equal to 3.'
      end

      pattern = Regexp.new(/^[0-9]{3}$/)
      if cvv !~ pattern
        fail ArgumentError, "invalid value for \"cvv\", must conform to the pattern #{pattern}."
      end

      @cvv = cvv
    end

    # Custom attribute writer method with validation
    # @param [Object] pin_number Value to be assigned
    def pin_number=(pin_number)
      if pin_number.nil?
        fail ArgumentError, 'pin_number cannot be nil'
      end

      if pin_number.to_s.length > 4
        fail ArgumentError, 'invalid value for "pin_number", the character length must be smaller than or equal to 4.'
      end

      if pin_number.to_s.length < 4
        fail ArgumentError, 'invalid value for "pin_number", the character length must be great than or equal to 4.'
      end

      pattern = Regexp.new(/^[0-9]{4}$/)
      if pin_number !~ pattern
        fail ArgumentError, "invalid value for \"pin_number\", must conform to the pattern #{pattern}."
      end

      @pin_number = pin_number
    end

    # Custom attribute writer method with validation
    # @param [Object] balance Value to be assigned
    def balance=(balance)
      if balance.nil?
        fail ArgumentError, 'balance cannot be nil'
      end

      if balance < 0
        fail ArgumentError, 'invalid value for "balance", must be greater than or equal to 0.'
      end

      @balance = balance
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["VISA", "MASTERCARD", "DISCOVER", "AMEX", "UNIONPAY"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["ACTIVE", "INACTIVE", "CLOSED"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          card_number == o.card_number &&
          cvv == o.cvv &&
          expiration_date == o.expiration_date &&
          pin_number == o.pin_number &&
          balance == o.balance &&
          type == o.type &&
          status == o.status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [card_number, cvv, expiration_date, pin_number, balance, type, status].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = MassPayRubySdk.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
