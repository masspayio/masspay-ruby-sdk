=begin
#MassPay API

#MassPay API

The version of the OpenAPI document: 0.1.4
Contact: support@masspay.io
Generated by: MassPay Inc.
OpenAPI Generator version: 6.5.0
=end

require 'date'
require 'time'

module MassPayRubySdk
  class ServicePayersInner
    # Token that represents the payout destination. 36 characters long
    attr_accessor :destination_token

    # base64 representation of the payer logo
    attr_accessor :payer_logo

    # Name of payer
    attr_accessor :payer_name

    # Lists all available currencies and their estimated rates
    attr_accessor :exchange_rate

    # Service fee
    attr_accessor :fee

    # The maximum amount the user can send with this service. 0 if no upper limit
    attr_accessor :max_limit

    # The minimum amount the user can send with this service. 0 if no lower limit
    attr_accessor :min_limit

    # Optional return field. Will only show if `limit` parameter is provided
    attr_accessor :source_amount

    # Total number of locations. Mostly relevant for cash pickup services. 0 if unknown or irrelevant
    attr_accessor :number_of_locations

    # Estimated availability of funds. When funds would be available to pickup/deposited
    attr_accessor :estimated_availability

    # When available, additional description that explains the service offered or requirements for funds delivery.
    attr_accessor :additional_description

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'destination_token' => :'destination_token',
        :'payer_logo' => :'payer_logo',
        :'payer_name' => :'payer_name',
        :'exchange_rate' => :'exchange_rate',
        :'fee' => :'fee',
        :'max_limit' => :'max_limit',
        :'min_limit' => :'min_limit',
        :'source_amount' => :'source_amount',
        :'number_of_locations' => :'number_of_locations',
        :'estimated_availability' => :'estimated_availability',
        :'additional_description' => :'additional_description'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'destination_token' => :'String',
        :'payer_logo' => :'String',
        :'payer_name' => :'String',
        :'exchange_rate' => :'Array<ServicePayersInnerExchangeRateInner>',
        :'fee' => :'Float',
        :'max_limit' => :'Float',
        :'min_limit' => :'Float',
        :'source_amount' => :'Float',
        :'number_of_locations' => :'Integer',
        :'estimated_availability' => :'Time',
        :'additional_description' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `MassPayRubySdk::ServicePayersInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `MassPayRubySdk::ServicePayersInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'destination_token')
        self.destination_token = attributes[:'destination_token']
      end

      if attributes.key?(:'payer_logo')
        self.payer_logo = attributes[:'payer_logo']
      end

      if attributes.key?(:'payer_name')
        self.payer_name = attributes[:'payer_name']
      end

      if attributes.key?(:'exchange_rate')
        if (value = attributes[:'exchange_rate']).is_a?(Array)
          self.exchange_rate = value
        end
      end

      if attributes.key?(:'fee')
        self.fee = attributes[:'fee']
      end

      if attributes.key?(:'max_limit')
        self.max_limit = attributes[:'max_limit']
      end

      if attributes.key?(:'min_limit')
        self.min_limit = attributes[:'min_limit']
      end

      if attributes.key?(:'source_amount')
        self.source_amount = attributes[:'source_amount']
      end

      if attributes.key?(:'number_of_locations')
        self.number_of_locations = attributes[:'number_of_locations']
      else
        self.number_of_locations = 0
      end

      if attributes.key?(:'estimated_availability')
        self.estimated_availability = attributes[:'estimated_availability']
      end

      if attributes.key?(:'additional_description')
        self.additional_description = attributes[:'additional_description']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @destination_token.nil?
        invalid_properties.push('invalid value for "destination_token", destination_token cannot be nil.')
      end

      if @payer_logo.nil?
        invalid_properties.push('invalid value for "payer_logo", payer_logo cannot be nil.')
      end

      if @payer_name.nil?
        invalid_properties.push('invalid value for "payer_name", payer_name cannot be nil.')
      end

      if @exchange_rate.nil?
        invalid_properties.push('invalid value for "exchange_rate", exchange_rate cannot be nil.')
      end

      if @fee.nil?
        invalid_properties.push('invalid value for "fee", fee cannot be nil.')
      end

      if @max_limit.nil?
        invalid_properties.push('invalid value for "max_limit", max_limit cannot be nil.')
      end

      if @min_limit.nil?
        invalid_properties.push('invalid value for "min_limit", min_limit cannot be nil.')
      end

      if !@number_of_locations.nil? && @number_of_locations < 0
        invalid_properties.push('invalid value for "number_of_locations", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @destination_token.nil?
      return false if @payer_logo.nil?
      return false if @payer_name.nil?
      return false if @exchange_rate.nil?
      return false if @fee.nil?
      return false if @max_limit.nil?
      return false if @min_limit.nil?
      return false if !@number_of_locations.nil? && @number_of_locations < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] number_of_locations Value to be assigned
    def number_of_locations=(number_of_locations)
      if !number_of_locations.nil? && number_of_locations < 0
        fail ArgumentError, 'invalid value for "number_of_locations", must be greater than or equal to 0.'
      end

      @number_of_locations = number_of_locations
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          destination_token == o.destination_token &&
          payer_logo == o.payer_logo &&
          payer_name == o.payer_name &&
          exchange_rate == o.exchange_rate &&
          fee == o.fee &&
          max_limit == o.max_limit &&
          min_limit == o.min_limit &&
          source_amount == o.source_amount &&
          number_of_locations == o.number_of_locations &&
          estimated_availability == o.estimated_availability &&
          additional_description == o.additional_description
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [destination_token, payer_logo, payer_name, exchange_rate, fee, max_limit, min_limit, source_amount, number_of_locations, estimated_availability, additional_description].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = MassPayRubySdk.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
