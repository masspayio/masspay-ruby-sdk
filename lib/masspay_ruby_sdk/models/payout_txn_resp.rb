=begin
#MassPay API

#MassPay API

The version of the OpenAPI document: 0.1.4
Contact: support@masspay.io
Generated by: MassPay Inc.
OpenAPI Generator version: 6.5.0
=end

require 'date'
require 'time'

module MassPayRubySdk
  # 
  class PayoutTxnResp
    # Token that represents the transaction that was just created. Need to be used to commit the transaction in `/payout/{user_token}/{payout_token}`. Value would be NSF if there are not enough funds in the `source_token`. Value would be `DUPLICATE` if there is a duplicate `client_transfer_id`.
    attr_accessor :payout_token

    # A client defined transfer identifier. This is the unique ID assigned to the transfer on your system. Max 50 characters.
    attr_accessor :client_transfer_id

    # The currency originating balance is stored in. Using [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format. In most cases this value will be USD, and therefore the defaut value if none is provided
    attr_accessor :source_currency_code

    # The currency the funds will be deposited into. Using [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format
    attr_accessor :destination_currency_code

    # Token that represents the funding source i.e. your bank account, user's wallet. 36 characters long
    attr_accessor :source_token

    # Token that represents the payout destination i.e. Omnex->Brazil->Bank Deposit->Itau. To be retrieved from the #pricing callback. If not provided, the last destination that was used for this user will be used. 36 characters long
    attr_accessor :destination_token

    # The amount to be sent for payout in source currency. i.e USD. Must be provided if source_amount is empty
    attr_accessor :destination_amount

    # The amount to be received by the payout in source currency. i.e USD. Must be provided if destination_amount is empty
    attr_accessor :source_amount

    # Token that represents set of attributes that associated with destination_token. For example, bank account, mobile account, wallet id, etc. If not provided, uses the last one used. 36 characters long
    attr_accessor :attr_set_token

    # The exchange rate to convert source_amount to destination_amount
    attr_accessor :exchange_rate

    # Fee to be charged for the transaction
    attr_accessor :fee

    # The time and date at which the transaction will expire. The transaction has to be finalized before this time. Transactions are valid for 2 minutes from creation time. If expired, a new transaction has to be created.
    attr_accessor :expiration

    # Code/pin that is required when collecting the money. Should be provided to the recipient to present to payout location.
    attr_accessor :pickup_code

    # The status of the transaction
    attr_accessor :status

    # base64 representation of the payer logo
    attr_accessor :payer_logo

    # Name of payer
    attr_accessor :payer_name

    # The type of delivery
    attr_accessor :delivery_type

    # Country code [ISO_3166](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3)
    attr_accessor :country_code

    # Optional JSON object with attributes that can later be searched to locate this payout. Do not include PII as this object is not encrypted.
    attr_accessor :metadata

    # Estimated availability of funds. When funds would be available to pickup/deposited
    attr_accessor :estimated_availability

    # Optional. Contains the reason for the status change. Most commonly used for CANCELLED status with the reason for cancellation
    attr_accessor :status_reason

    # The relevant attributes that were used to fulfill this payout
    attr_accessor :attrs

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'payout_token' => :'payout_token',
        :'client_transfer_id' => :'client_transfer_id',
        :'source_currency_code' => :'source_currency_code',
        :'destination_currency_code' => :'destination_currency_code',
        :'source_token' => :'source_token',
        :'destination_token' => :'destination_token',
        :'destination_amount' => :'destination_amount',
        :'source_amount' => :'source_amount',
        :'attr_set_token' => :'attr_set_token',
        :'exchange_rate' => :'exchange_rate',
        :'fee' => :'fee',
        :'expiration' => :'expiration',
        :'pickup_code' => :'pickup_code',
        :'status' => :'status',
        :'payer_logo' => :'payer_logo',
        :'payer_name' => :'payer_name',
        :'delivery_type' => :'delivery_type',
        :'country_code' => :'country_code',
        :'metadata' => :'metadata',
        :'estimated_availability' => :'estimated_availability',
        :'status_reason' => :'status_reason',
        :'attrs' => :'attrs'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'payout_token' => :'String',
        :'client_transfer_id' => :'String',
        :'source_currency_code' => :'String',
        :'destination_currency_code' => :'String',
        :'source_token' => :'String',
        :'destination_token' => :'String',
        :'destination_amount' => :'Float',
        :'source_amount' => :'Float',
        :'attr_set_token' => :'String',
        :'exchange_rate' => :'Float',
        :'fee' => :'Float',
        :'expiration' => :'String',
        :'pickup_code' => :'String',
        :'status' => :'String',
        :'payer_logo' => :'String',
        :'payer_name' => :'String',
        :'delivery_type' => :'String',
        :'country_code' => :'String',
        :'metadata' => :'Object',
        :'estimated_availability' => :'Time',
        :'status_reason' => :'String',
        :'attrs' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `MassPayRubySdk::PayoutTxnResp` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `MassPayRubySdk::PayoutTxnResp`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'payout_token')
        self.payout_token = attributes[:'payout_token']
      end

      if attributes.key?(:'client_transfer_id')
        self.client_transfer_id = attributes[:'client_transfer_id']
      end

      if attributes.key?(:'source_currency_code')
        self.source_currency_code = attributes[:'source_currency_code']
      end

      if attributes.key?(:'destination_currency_code')
        self.destination_currency_code = attributes[:'destination_currency_code']
      end

      if attributes.key?(:'source_token')
        self.source_token = attributes[:'source_token']
      end

      if attributes.key?(:'destination_token')
        self.destination_token = attributes[:'destination_token']
      end

      if attributes.key?(:'destination_amount')
        self.destination_amount = attributes[:'destination_amount']
      end

      if attributes.key?(:'source_amount')
        self.source_amount = attributes[:'source_amount']
      end

      if attributes.key?(:'attr_set_token')
        self.attr_set_token = attributes[:'attr_set_token']
      end

      if attributes.key?(:'exchange_rate')
        self.exchange_rate = attributes[:'exchange_rate']
      end

      if attributes.key?(:'fee')
        self.fee = attributes[:'fee']
      end

      if attributes.key?(:'expiration')
        self.expiration = attributes[:'expiration']
      end

      if attributes.key?(:'pickup_code')
        self.pickup_code = attributes[:'pickup_code']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'payer_logo')
        self.payer_logo = attributes[:'payer_logo']
      end

      if attributes.key?(:'payer_name')
        self.payer_name = attributes[:'payer_name']
      end

      if attributes.key?(:'delivery_type')
        self.delivery_type = attributes[:'delivery_type']
      end

      if attributes.key?(:'country_code')
        self.country_code = attributes[:'country_code']
      end

      if attributes.key?(:'metadata')
        self.metadata = attributes[:'metadata']
      end

      if attributes.key?(:'estimated_availability')
        self.estimated_availability = attributes[:'estimated_availability']
      end

      if attributes.key?(:'status_reason')
        self.status_reason = attributes[:'status_reason']
      end

      if attributes.key?(:'attrs')
        self.attrs = attributes[:'attrs']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @payout_token.nil?
        invalid_properties.push('invalid value for "payout_token", payout_token cannot be nil.')
      end

      if @client_transfer_id.nil?
        invalid_properties.push('invalid value for "client_transfer_id", client_transfer_id cannot be nil.')
      end

      if @client_transfer_id.to_s.length > 50
        invalid_properties.push('invalid value for "client_transfer_id", the character length must be smaller than or equal to 50.')
      end

      if @source_currency_code.nil?
        invalid_properties.push('invalid value for "source_currency_code", source_currency_code cannot be nil.')
      end

      if @destination_currency_code.nil?
        invalid_properties.push('invalid value for "destination_currency_code", destination_currency_code cannot be nil.')
      end

      if @source_token.nil?
        invalid_properties.push('invalid value for "source_token", source_token cannot be nil.')
      end

      if @destination_token.nil?
        invalid_properties.push('invalid value for "destination_token", destination_token cannot be nil.')
      end

      if @destination_amount.nil?
        invalid_properties.push('invalid value for "destination_amount", destination_amount cannot be nil.')
      end

      if @source_amount.nil?
        invalid_properties.push('invalid value for "source_amount", source_amount cannot be nil.')
      end

      if @attr_set_token.nil?
        invalid_properties.push('invalid value for "attr_set_token", attr_set_token cannot be nil.')
      end

      if @exchange_rate.nil?
        invalid_properties.push('invalid value for "exchange_rate", exchange_rate cannot be nil.')
      end

      if @fee.nil?
        invalid_properties.push('invalid value for "fee", fee cannot be nil.')
      end

      if @expiration.nil?
        invalid_properties.push('invalid value for "expiration", expiration cannot be nil.')
      end

      if @pickup_code.nil?
        invalid_properties.push('invalid value for "pickup_code", pickup_code cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @payer_name.nil?
        invalid_properties.push('invalid value for "payer_name", payer_name cannot be nil.')
      end

      if @delivery_type.nil?
        invalid_properties.push('invalid value for "delivery_type", delivery_type cannot be nil.')
      end

      if @country_code.nil?
        invalid_properties.push('invalid value for "country_code", country_code cannot be nil.')
      end

      if @country_code.to_s.length > 3
        invalid_properties.push('invalid value for "country_code", the character length must be smaller than or equal to 3.')
      end

      if @country_code.to_s.length < 3
        invalid_properties.push('invalid value for "country_code", the character length must be great than or equal to 3.')
      end

      if @estimated_availability.nil?
        invalid_properties.push('invalid value for "estimated_availability", estimated_availability cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @payout_token.nil?
      return false if @client_transfer_id.nil?
      return false if @client_transfer_id.to_s.length > 50
      return false if @source_currency_code.nil?
      return false if @destination_currency_code.nil?
      return false if @source_token.nil?
      return false if @destination_token.nil?
      return false if @destination_amount.nil?
      return false if @source_amount.nil?
      return false if @attr_set_token.nil?
      return false if @exchange_rate.nil?
      return false if @fee.nil?
      return false if @expiration.nil?
      return false if @pickup_code.nil?
      return false if @status.nil?
      status_validator = EnumAttributeValidator.new('String', ["PENDING", "PROCESSING", "COMPLETED", "CANCELLED", "SCHEDULED", "READY_FOR_PICKUP", "HOLD", "ERROR"])
      return false unless status_validator.valid?(@status)
      return false if @payer_name.nil?
      return false if @delivery_type.nil?
      delivery_type_validator = EnumAttributeValidator.new('String', ["CASH_PICKUP", "BANK_DEPOSIT", "HOME_DELIVERY", "MOBILE_WALLET", "MASSPAY_CARD", "PAPER_CHECK", "BILL", "CRYPTOCURRENCY"])
      return false unless delivery_type_validator.valid?(@delivery_type)
      return false if @country_code.nil?
      return false if @country_code.to_s.length > 3
      return false if @country_code.to_s.length < 3
      return false if @estimated_availability.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] client_transfer_id Value to be assigned
    def client_transfer_id=(client_transfer_id)
      if client_transfer_id.nil?
        fail ArgumentError, 'client_transfer_id cannot be nil'
      end

      if client_transfer_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "client_transfer_id", the character length must be smaller than or equal to 50.'
      end

      @client_transfer_id = client_transfer_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["PENDING", "PROCESSING", "COMPLETED", "CANCELLED", "SCHEDULED", "READY_FOR_PICKUP", "HOLD", "ERROR"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] delivery_type Object to be assigned
    def delivery_type=(delivery_type)
      validator = EnumAttributeValidator.new('String', ["CASH_PICKUP", "BANK_DEPOSIT", "HOME_DELIVERY", "MOBILE_WALLET", "MASSPAY_CARD", "PAPER_CHECK", "BILL", "CRYPTOCURRENCY"])
      unless validator.valid?(delivery_type)
        fail ArgumentError, "invalid value for \"delivery_type\", must be one of #{validator.allowable_values}."
      end
      @delivery_type = delivery_type
    end

    # Custom attribute writer method with validation
    # @param [Object] country_code Value to be assigned
    def country_code=(country_code)
      if country_code.nil?
        fail ArgumentError, 'country_code cannot be nil'
      end

      if country_code.to_s.length > 3
        fail ArgumentError, 'invalid value for "country_code", the character length must be smaller than or equal to 3.'
      end

      if country_code.to_s.length < 3
        fail ArgumentError, 'invalid value for "country_code", the character length must be great than or equal to 3.'
      end

      @country_code = country_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          payout_token == o.payout_token &&
          client_transfer_id == o.client_transfer_id &&
          source_currency_code == o.source_currency_code &&
          destination_currency_code == o.destination_currency_code &&
          source_token == o.source_token &&
          destination_token == o.destination_token &&
          destination_amount == o.destination_amount &&
          source_amount == o.source_amount &&
          attr_set_token == o.attr_set_token &&
          exchange_rate == o.exchange_rate &&
          fee == o.fee &&
          expiration == o.expiration &&
          pickup_code == o.pickup_code &&
          status == o.status &&
          payer_logo == o.payer_logo &&
          payer_name == o.payer_name &&
          delivery_type == o.delivery_type &&
          country_code == o.country_code &&
          metadata == o.metadata &&
          estimated_availability == o.estimated_availability &&
          status_reason == o.status_reason &&
          attrs == o.attrs
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [payout_token, client_transfer_id, source_currency_code, destination_currency_code, source_token, destination_token, destination_amount, source_amount, attr_set_token, exchange_rate, fee, expiration, pickup_code, status, payer_logo, payer_name, delivery_type, country_code, metadata, estimated_availability, status_reason, attrs].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = MassPayRubySdk.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
