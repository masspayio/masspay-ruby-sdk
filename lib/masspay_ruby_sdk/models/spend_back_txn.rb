=begin
#MassPay API

#MassPay API

The version of the OpenAPI document: 0.1.4
Contact: support@masspay.io
Generated by: MassPay Inc.
OpenAPI Generator version: 6.5.0
=end

require 'date'
require 'time'

module MassPayRubySdk
  class SpendBackTxn
    # A client defined spend back identifier. This is the unique ID assigned to the load on your system. Max 50 characters.
    attr_accessor :client_spendback_id

    # Token that represents the funding source i.e. bank account, wallet. 36 characters long
    attr_accessor :source_token

    # The currency originating balance is stored in. Using [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format. In most cases this value will be USD, and therefore the defaut value if none is provided
    attr_accessor :source_currency_code

    # The amount to debit the user's wallet in source currency
    attr_accessor :amount

    # A description for the spend back
    attr_accessor :notes

    # Optional JSON object with attributes that can later be searched to locate this spendback. Do not include PII as this object is not encrypted.
    attr_accessor :metadata

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'client_spendback_id' => :'client_spendback_id',
        :'source_token' => :'source_token',
        :'source_currency_code' => :'source_currency_code',
        :'amount' => :'amount',
        :'notes' => :'notes',
        :'metadata' => :'metadata'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'client_spendback_id' => :'String',
        :'source_token' => :'String',
        :'source_currency_code' => :'String',
        :'amount' => :'Float',
        :'notes' => :'String',
        :'metadata' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `MassPayRubySdk::SpendBackTxn` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `MassPayRubySdk::SpendBackTxn`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'client_spendback_id')
        self.client_spendback_id = attributes[:'client_spendback_id']
      end

      if attributes.key?(:'source_token')
        self.source_token = attributes[:'source_token']
      end

      if attributes.key?(:'source_currency_code')
        self.source_currency_code = attributes[:'source_currency_code']
      else
        self.source_currency_code = 'USD'
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.key?(:'metadata')
        self.metadata = attributes[:'metadata']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @client_spendback_id.nil?
        invalid_properties.push('invalid value for "client_spendback_id", client_spendback_id cannot be nil.')
      end

      if @client_spendback_id.to_s.length > 50
        invalid_properties.push('invalid value for "client_spendback_id", the character length must be smaller than or equal to 50.')
      end

      if @source_token.nil?
        invalid_properties.push('invalid value for "source_token", source_token cannot be nil.')
      end

      if @source_currency_code.nil?
        invalid_properties.push('invalid value for "source_currency_code", source_currency_code cannot be nil.')
      end

      if @amount.nil?
        invalid_properties.push('invalid value for "amount", amount cannot be nil.')
      end

      if !@notes.nil? && @notes.to_s.length > 255
        invalid_properties.push('invalid value for "notes", the character length must be smaller than or equal to 255.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @client_spendback_id.nil?
      return false if @client_spendback_id.to_s.length > 50
      return false if @source_token.nil?
      return false if @source_currency_code.nil?
      return false if @amount.nil?
      return false if !@notes.nil? && @notes.to_s.length > 255
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] client_spendback_id Value to be assigned
    def client_spendback_id=(client_spendback_id)
      if client_spendback_id.nil?
        fail ArgumentError, 'client_spendback_id cannot be nil'
      end

      if client_spendback_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "client_spendback_id", the character length must be smaller than or equal to 50.'
      end

      @client_spendback_id = client_spendback_id
    end

    # Custom attribute writer method with validation
    # @param [Object] notes Value to be assigned
    def notes=(notes)
      if !notes.nil? && notes.to_s.length > 255
        fail ArgumentError, 'invalid value for "notes", the character length must be smaller than or equal to 255.'
      end

      @notes = notes
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          client_spendback_id == o.client_spendback_id &&
          source_token == o.source_token &&
          source_currency_code == o.source_currency_code &&
          amount == o.amount &&
          notes == o.notes &&
          metadata == o.metadata
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [client_spendback_id, source_token, source_currency_code, amount, notes, metadata].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = MassPayRubySdk.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
