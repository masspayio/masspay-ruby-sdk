=begin
#MassPay API

#MassPay API

The version of the OpenAPI document: 0.1.4
Contact: support@masspay.io
Generated by: MassPay Inc.
OpenAPI Generator version: 6.5.0
=end

require 'cgi'

module MassPayRubySdk
  class SpendBackApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get history of spend backs by user token
    # Gets a list of all historical spendbacks for a provided user token.
    # @param user_token [String] Token representing the user to fetch/initiate spend back
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @return [Array<SpendBacks>]
    def get_user_spendbacks_by_token(user_token, opts = {})
      data, _status_code, _headers = get_user_spendbacks_by_token_with_http_info(user_token, opts)
      data
    end

    # Get history of spend backs by user token
    # Gets a list of all historical spendbacks for a provided user token.
    # @param user_token [String] Token representing the user to fetch/initiate spend back
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @return [Array<(Array<SpendBacks>, Integer, Hash)>] Array<SpendBacks> data, response status code and response headers
    def get_user_spendbacks_by_token_with_http_info(user_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpendBackApi.get_user_spendbacks_by_token ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling SpendBackApi.get_user_spendbacks_by_token"
      end
      # resource path
      local_var_path = '/spendback/{user_token}'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SpendBacks>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"SpendBackApi.get_user_spendbacks_by_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpendBackApi#get_user_spendbacks_by_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate a spend back transaction
    # Initiates a spend back transaction to a provided user token.
    # @param user_token [String] Token representing the user to fetch/initiate spend back
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @option opts [SpendBackTxn] :spend_back_txn Spend back information
    # @return [SpendBackTxnResp]
    def initiate_spendback(user_token, opts = {})
      data, _status_code, _headers = initiate_spendback_with_http_info(user_token, opts)
      data
    end

    # Initiate a spend back transaction
    # Initiates a spend back transaction to a provided user token.
    # @param user_token [String] Token representing the user to fetch/initiate spend back
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @option opts [SpendBackTxn] :spend_back_txn Spend back information
    # @return [Array<(SpendBackTxnResp, Integer, Hash)>] SpendBackTxnResp data, response status code and response headers
    def initiate_spendback_with_http_info(user_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpendBackApi.initiate_spendback ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling SpendBackApi.initiate_spendback"
      end
      # resource path
      local_var_path = '/spendback/{user_token}'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'spend_back_txn'])

      # return_type
      return_type = opts[:debug_return_type] || 'SpendBackTxnResp'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"SpendBackApi.initiate_spendback",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpendBackApi#initiate_spendback\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
