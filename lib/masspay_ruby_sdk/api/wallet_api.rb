=begin
#MassPay API

#MassPay API

The version of the OpenAPI document: 0.1.4
Contact: support@masspay.io
Generated by: MassPay Inc.
OpenAPI Generator version: 6.5.0
=end

require 'cgi'

module MassPayRubySdk
  class WalletApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add autopay rule
    # This **POST** endpoint is used to add an autopay rule that will initiate a payout whenever the provided wallet token is loaded. <br> You can use this endpoint to create an autopay rule that automatically sends a percentage of incoming load to a specific destination. <br> To use this endpoint, you need to provide the `user_token` and `wallet_token` as required parameters in the URL Path, and the `destination_token` and percentage of incoming load that should be autopaid to the `destination_token` in the request Body. <br> The response will include a JSON object containing the details of the created autopay rule, including the token, `destination_token` and percentage.
    # @param user_token [String] Token representing the user who owns the wallet
    # @param wallet_token [String] Token representing the wallet
    # @param [Hash] opts the optional parameters
    # @option opts [AutopayRule] :autopay_rule Autopay rule configuration
    # @return [AutopayResp]
    def create_autopay_rule(user_token, wallet_token, opts = {})
      data, _status_code, _headers = create_autopay_rule_with_http_info(user_token, wallet_token, opts)
      data
    end

    # Add autopay rule
    # This **POST** endpoint is used to add an autopay rule that will initiate a payout whenever the provided wallet token is loaded. &lt;br&gt; You can use this endpoint to create an autopay rule that automatically sends a percentage of incoming load to a specific destination. &lt;br&gt; To use this endpoint, you need to provide the &#x60;user_token&#x60; and &#x60;wallet_token&#x60; as required parameters in the URL Path, and the &#x60;destination_token&#x60; and percentage of incoming load that should be autopaid to the &#x60;destination_token&#x60; in the request Body. &lt;br&gt; The response will include a JSON object containing the details of the created autopay rule, including the token, &#x60;destination_token&#x60; and percentage.
    # @param user_token [String] Token representing the user who owns the wallet
    # @param wallet_token [String] Token representing the wallet
    # @param [Hash] opts the optional parameters
    # @option opts [AutopayRule] :autopay_rule Autopay rule configuration
    # @return [Array<(AutopayResp, Integer, Hash)>] AutopayResp data, response status code and response headers
    def create_autopay_rule_with_http_info(user_token, wallet_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.create_autopay_rule ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling WalletApi.create_autopay_rule"
      end
      # verify the required parameter 'wallet_token' is set
      if @api_client.config.client_side_validation && wallet_token.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_token' when calling WalletApi.create_autopay_rule"
      end
      # resource path
      local_var_path = '/wallet/{user_token}/{wallet_token}/autopay'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s)).sub('{' + 'wallet_token' + '}', CGI.escape(wallet_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'autopay_rule'])

      # return_type
      return_type = opts[:debug_return_type] || 'AutopayResp'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"WalletApi.create_autopay_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#create_autopay_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete autopay rule
    # This **DELETE** endpoint is used to delete an existing autopay rule. <br> You can use this endpoint to remove an autopay rule that is no longer needed. <br> To use this endpoint, you need to provide the `user_token` and `wallet_token` as required parameters in the URL Path, and the token of the autopay rule you wish to delete in the request Body. <br> The response will include a message indicating the success of the deletion.
    # @param user_token [String] Token representing the user who owns the wallet
    # @param wallet_token [String] Token representing the wallet
    # @param token [String] Autopay token to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_autopay_rule(user_token, wallet_token, token, opts = {})
      delete_autopay_rule_with_http_info(user_token, wallet_token, token, opts)
      nil
    end

    # Delete autopay rule
    # This **DELETE** endpoint is used to delete an existing autopay rule. &lt;br&gt; You can use this endpoint to remove an autopay rule that is no longer needed. &lt;br&gt; To use this endpoint, you need to provide the &#x60;user_token&#x60; and &#x60;wallet_token&#x60; as required parameters in the URL Path, and the token of the autopay rule you wish to delete in the request Body. &lt;br&gt; The response will include a message indicating the success of the deletion.
    # @param user_token [String] Token representing the user who owns the wallet
    # @param wallet_token [String] Token representing the wallet
    # @param token [String] Autopay token to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_autopay_rule_with_http_info(user_token, wallet_token, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.delete_autopay_rule ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling WalletApi.delete_autopay_rule"
      end
      # verify the required parameter 'wallet_token' is set
      if @api_client.config.client_side_validation && wallet_token.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_token' when calling WalletApi.delete_autopay_rule"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling WalletApi.delete_autopay_rule"
      end
      # resource path
      local_var_path = '/wallet/{user_token}/{wallet_token}/autopay'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s)).sub('{' + 'wallet_token' + '}', CGI.escape(wallet_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"WalletApi.delete_autopay_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#delete_autopay_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all autopay rules
    # This **GET** endpoint is used to retrieve all autopay rules currently applied to the provided wallet token. <br> You can use this endpoint to obtain information about the autopay rules associated with the wallet. <br> To use this endpoint, you need to provide the `user_token` and `wallet_token` as required parameters in the URL Path. <br> The response will include a JSON array containing details for each autopay rule, including the token, `destination_token` and percentage.
    # @param user_token [String] Token representing the user who owns the wallet
    # @param wallet_token [String] Token representing the wallet
    # @param [Hash] opts the optional parameters
    # @return [Array<AutopayResp>]
    def get_autopay_rules(user_token, wallet_token, opts = {})
      data, _status_code, _headers = get_autopay_rules_with_http_info(user_token, wallet_token, opts)
      data
    end

    # Get all autopay rules
    # This **GET** endpoint is used to retrieve all autopay rules currently applied to the provided wallet token. &lt;br&gt; You can use this endpoint to obtain information about the autopay rules associated with the wallet. &lt;br&gt; To use this endpoint, you need to provide the &#x60;user_token&#x60; and &#x60;wallet_token&#x60; as required parameters in the URL Path. &lt;br&gt; The response will include a JSON array containing details for each autopay rule, including the token, &#x60;destination_token&#x60; and percentage.
    # @param user_token [String] Token representing the user who owns the wallet
    # @param wallet_token [String] Token representing the wallet
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AutopayResp>, Integer, Hash)>] Array<AutopayResp> data, response status code and response headers
    def get_autopay_rules_with_http_info(user_token, wallet_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.get_autopay_rules ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling WalletApi.get_autopay_rules"
      end
      # verify the required parameter 'wallet_token' is set
      if @api_client.config.client_side_validation && wallet_token.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_token' when calling WalletApi.get_autopay_rules"
      end
      # resource path
      local_var_path = '/wallet/{user_token}/{wallet_token}/autopay'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s)).sub('{' + 'wallet_token' + '}', CGI.escape(wallet_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AutopayResp>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"WalletApi.get_autopay_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#get_autopay_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all available wallets for a user
    # This **GET** endpoint is used to retrieve all available wallets for a provided user token. <br> You can use this endpoint to obtain information about the wallets associated with the provided user token. <br> To use this endpoint, you need to provide the `user_token` as a required parameter in the URL Path. <br> The response will include a JSON array containing details for each wallet including `user_token`, `balance`, `currency_code`.
    # @param user_token [String] Token representing the user who owns the wallet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @return [Array<WalletTxnResp>]
    def get_wallet(user_token, opts = {})
      data, _status_code, _headers = get_wallet_with_http_info(user_token, opts)
      data
    end

    # Retrieve all available wallets for a user
    # This **GET** endpoint is used to retrieve all available wallets for a provided user token. &lt;br&gt; You can use this endpoint to obtain information about the wallets associated with the provided user token. &lt;br&gt; To use this endpoint, you need to provide the &#x60;user_token&#x60; as a required parameter in the URL Path. &lt;br&gt; The response will include a JSON array containing details for each wallet including &#x60;user_token&#x60;, &#x60;balance&#x60;, &#x60;currency_code&#x60;.
    # @param user_token [String] Token representing the user who owns the wallet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @return [Array<(Array<WalletTxnResp>, Integer, Hash)>] Array<WalletTxnResp> data, response status code and response headers
    def get_wallet_with_http_info(user_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.get_wallet ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling WalletApi.get_wallet"
      end
      # resource path
      local_var_path = '/wallet/{user_token}'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<WalletTxnResp>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"WalletApi.get_wallet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#get_wallet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get MassPay Card Information
    # This **GET** endpoint is used to retrieve MassPay card information associated with the provided wallet token. <br> You can use this endpoint to obtain information about the MassPay card associated with the wallet. <br> To use this endpoint, you need to provide the `user_token` and `wallet_token` as required parameters in the URL Path. <br> The response will include a JSON object containing details for the MassPay card, including the card number, balance, status.
    # @param user_token [String] Token representing the user who owns the wallet
    # @param wallet_token [String] Token representing the wallet
    # @param [Hash] opts the optional parameters
    # @return [GetWalletCardInfo200Response]
    def get_wallet_card_info(user_token, wallet_token, opts = {})
      data, _status_code, _headers = get_wallet_card_info_with_http_info(user_token, wallet_token, opts)
      data
    end

    # Get MassPay Card Information
    # This **GET** endpoint is used to retrieve MassPay card information associated with the provided wallet token. &lt;br&gt; You can use this endpoint to obtain information about the MassPay card associated with the wallet. &lt;br&gt; To use this endpoint, you need to provide the &#x60;user_token&#x60; and &#x60;wallet_token&#x60; as required parameters in the URL Path. &lt;br&gt; The response will include a JSON object containing details for the MassPay card, including the card number, balance, status.
    # @param user_token [String] Token representing the user who owns the wallet
    # @param wallet_token [String] Token representing the wallet
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetWalletCardInfo200Response, Integer, Hash)>] GetWalletCardInfo200Response data, response status code and response headers
    def get_wallet_card_info_with_http_info(user_token, wallet_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.get_wallet_card_info ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling WalletApi.get_wallet_card_info"
      end
      # verify the required parameter 'wallet_token' is set
      if @api_client.config.client_side_validation && wallet_token.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_token' when calling WalletApi.get_wallet_card_info"
      end
      # resource path
      local_var_path = '/wallet/{user_token}/{wallet_token}/card'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s)).sub('{' + 'wallet_token' + '}', CGI.escape(wallet_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetWalletCardInfo200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"WalletApi.get_wallet_card_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#get_wallet_card_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update MassPay Card Information
    # This **PUT** endpoint is used to update the MassPay card information for a provided user token and wallet token. <br> You can use this endpoint to help your users manage their MassPay card information, including updating their card PIN number or status. <br> To use this endpoint, you need to provide the `user_token` and `wallet_token` as parameters in the URL Path, along with the parameters in the request Query, including the card pin number or(and) status. <br> The endpoint will then update the card information for the provided user and wallet token.
    # @param user_token [String] Token representing the user who owns the wallet
    # @param wallet_token [String] Token representing the wallet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pin New 4 digit pin number for the card (To be used in ATM machines)
    # @option opts [String] :status New status for the card
    # @return [nil]
    def update_wallet_card_info(user_token, wallet_token, opts = {})
      update_wallet_card_info_with_http_info(user_token, wallet_token, opts)
      nil
    end

    # Update MassPay Card Information
    # This **PUT** endpoint is used to update the MassPay card information for a provided user token and wallet token. &lt;br&gt; You can use this endpoint to help your users manage their MassPay card information, including updating their card PIN number or status. &lt;br&gt; To use this endpoint, you need to provide the &#x60;user_token&#x60; and &#x60;wallet_token&#x60; as parameters in the URL Path, along with the parameters in the request Query, including the card pin number or(and) status. &lt;br&gt; The endpoint will then update the card information for the provided user and wallet token.
    # @param user_token [String] Token representing the user who owns the wallet
    # @param wallet_token [String] Token representing the wallet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pin New 4 digit pin number for the card (To be used in ATM machines)
    # @option opts [String] :status New status for the card
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_wallet_card_info_with_http_info(user_token, wallet_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.update_wallet_card_info ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling WalletApi.update_wallet_card_info"
      end
      # verify the required parameter 'wallet_token' is set
      if @api_client.config.client_side_validation && wallet_token.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_token' when calling WalletApi.update_wallet_card_info"
      end
      pattern = Regexp.new(/^[0-9]{4}$/)
      if @api_client.config.client_side_validation && !opts[:'pin'].nil? && opts[:'pin'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"pin\"]' when calling WalletApi.update_wallet_card_info, must conform to the pattern #{pattern}."
      end

      allowable_values = ["SUSPEND", "UNSUSPEND", "CLOSE"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/wallet/{user_token}/{wallet_token}/card'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s)).sub('{' + 'wallet_token' + '}', CGI.escape(wallet_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pin'] = opts[:'pin'] if !opts[:'pin'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"WalletApi.update_wallet_card_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#update_wallet_card_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
