=begin
#MassPay API

#MassPay API

The version of the OpenAPI document: 0.1.4
Contact: support@masspay.io
Generated by: MassPay Inc.
OpenAPI Generator version: 6.5.0
=end

require 'cgi'

module MassPayRubySdk
  class LoadApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Reverse a user load
    # Reverse a load that was already processed. If the load is still in scheduled status, it will mark it as cancelled
    # @param user_token [String] Token representing the user to load/fetch loads for
    # @param load_token [String] Load token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @return [nil]
    def cancel_user_load(user_token, load_token, opts = {})
      cancel_user_load_with_http_info(user_token, load_token, opts)
      nil
    end

    # Reverse a user load
    # Reverse a load that was already processed. If the load is still in scheduled status, it will mark it as cancelled
    # @param user_token [String] Token representing the user to load/fetch loads for
    # @param load_token [String] Load token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def cancel_user_load_with_http_info(user_token, load_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadApi.cancel_user_load ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling LoadApi.cancel_user_load"
      end
      # verify the required parameter 'load_token' is set
      if @api_client.config.client_side_validation && load_token.nil?
        fail ArgumentError, "Missing the required parameter 'load_token' when calling LoadApi.cancel_user_load"
      end
      # resource path
      local_var_path = '/load/{user_token}'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'load_token'] = load_token

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"LoadApi.cancel_user_load",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadApi#cancel_user_load\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add autopay rule
    # Create an autopay rule that will automatically initiate a payout whenever the `wallet_token` is loaded
    # @param user_token [String] Token representing the user who owns the wallet
    # @param wallet_token [String] Token representing the wallet
    # @param [Hash] opts the optional parameters
    # @option opts [AutopayRule] :autopay_rule Autopay rule configuration
    # @return [AutopayResp]
    def create_autopay_rule(user_token, wallet_token, opts = {})
      data, _status_code, _headers = create_autopay_rule_with_http_info(user_token, wallet_token, opts)
      data
    end

    # Add autopay rule
    # Create an autopay rule that will automatically initiate a payout whenever the &#x60;wallet_token&#x60; is loaded
    # @param user_token [String] Token representing the user who owns the wallet
    # @param wallet_token [String] Token representing the wallet
    # @param [Hash] opts the optional parameters
    # @option opts [AutopayRule] :autopay_rule Autopay rule configuration
    # @return [Array<(AutopayResp, Integer, Hash)>] AutopayResp data, response status code and response headers
    def create_autopay_rule_with_http_info(user_token, wallet_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadApi.create_autopay_rule ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling LoadApi.create_autopay_rule"
      end
      # verify the required parameter 'wallet_token' is set
      if @api_client.config.client_side_validation && wallet_token.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_token' when calling LoadApi.create_autopay_rule"
      end
      # resource path
      local_var_path = '/wallet/{user_token}/{wallet_token}/autopay'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s)).sub('{' + 'wallet_token' + '}', CGI.escape(wallet_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'autopay_rule'])

      # return_type
      return_type = opts[:debug_return_type] || 'AutopayResp'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"LoadApi.create_autopay_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadApi#create_autopay_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete autopay rule
    # Deletes an autopay rule
    # @param user_token [String] Token representing the user who owns the wallet
    # @param wallet_token [String] Token representing the wallet
    # @param token [String] Autopay token to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_autopay_rule(user_token, wallet_token, token, opts = {})
      delete_autopay_rule_with_http_info(user_token, wallet_token, token, opts)
      nil
    end

    # Delete autopay rule
    # Deletes an autopay rule
    # @param user_token [String] Token representing the user who owns the wallet
    # @param wallet_token [String] Token representing the wallet
    # @param token [String] Autopay token to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_autopay_rule_with_http_info(user_token, wallet_token, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadApi.delete_autopay_rule ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling LoadApi.delete_autopay_rule"
      end
      # verify the required parameter 'wallet_token' is set
      if @api_client.config.client_side_validation && wallet_token.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_token' when calling LoadApi.delete_autopay_rule"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling LoadApi.delete_autopay_rule"
      end
      # resource path
      local_var_path = '/wallet/{user_token}/{wallet_token}/autopay'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s)).sub('{' + 'wallet_token' + '}', CGI.escape(wallet_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"LoadApi.delete_autopay_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadApi#delete_autopay_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all autopay rules
    # Obtain list of all autopay rules currently applied to this wallet
    # @param user_token [String] Token representing the user who owns the wallet
    # @param wallet_token [String] Token representing the wallet
    # @param [Hash] opts the optional parameters
    # @return [Array<AutopayResp>]
    def get_autopay_rules(user_token, wallet_token, opts = {})
      data, _status_code, _headers = get_autopay_rules_with_http_info(user_token, wallet_token, opts)
      data
    end

    # Get all autopay rules
    # Obtain list of all autopay rules currently applied to this wallet
    # @param user_token [String] Token representing the user who owns the wallet
    # @param wallet_token [String] Token representing the wallet
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AutopayResp>, Integer, Hash)>] Array<AutopayResp> data, response status code and response headers
    def get_autopay_rules_with_http_info(user_token, wallet_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadApi.get_autopay_rules ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling LoadApi.get_autopay_rules"
      end
      # verify the required parameter 'wallet_token' is set
      if @api_client.config.client_side_validation && wallet_token.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_token' when calling LoadApi.get_autopay_rules"
      end
      # resource path
      local_var_path = '/wallet/{user_token}/{wallet_token}/autopay'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s)).sub('{' + 'wallet_token' + '}', CGI.escape(wallet_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AutopayResp>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"LoadApi.get_autopay_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadApi#get_autopay_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get history of loads by user token
    # Gets a transaction history of all loads that were made to the provided user token, including scheduled loads.
    # @param user_token [String] The user token that needs to be fetched.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @return [Array<Loads>]
    def get_user_loads_by_token(user_token, opts = {})
      data, _status_code, _headers = get_user_loads_by_token_with_http_info(user_token, opts)
      data
    end

    # Get history of loads by user token
    # Gets a transaction history of all loads that were made to the provided user token, including scheduled loads.
    # @param user_token [String] The user token that needs to be fetched.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @return [Array<(Array<Loads>, Integer, Hash)>] Array<Loads> data, response status code and response headers
    def get_user_loads_by_token_with_http_info(user_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadApi.get_user_loads_by_token ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling LoadApi.get_user_loads_by_token"
      end
      # resource path
      local_var_path = '/load/{user_token}'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Loads>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"LoadApi.get_user_loads_by_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadApi#get_user_loads_by_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate a load transaction
    # Initiates a load of funds into a user token's wallet.
    # @param user_token [String] Token representing the user to load
    # @param load_txn [LoadTxn] Load information
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @return [LoadTxnResp]
    def load_user(user_token, load_txn, opts = {})
      data, _status_code, _headers = load_user_with_http_info(user_token, load_txn, opts)
      data
    end

    # Initiate a load transaction
    # Initiates a load of funds into a user token&#39;s wallet.
    # @param user_token [String] Token representing the user to load
    # @param load_txn [LoadTxn] Load information
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @return [Array<(LoadTxnResp, Integer, Hash)>] LoadTxnResp data, response status code and response headers
    def load_user_with_http_info(user_token, load_txn, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadApi.load_user ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling LoadApi.load_user"
      end
      # verify the required parameter 'load_txn' is set
      if @api_client.config.client_side_validation && load_txn.nil?
        fail ArgumentError, "Missing the required parameter 'load_txn' when calling LoadApi.load_user"
      end
      # resource path
      local_var_path = '/load/{user_token}'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(load_txn)

      # return_type
      return_type = opts[:debug_return_type] || 'LoadTxnResp'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"LoadApi.load_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadApi#load_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resend Load Notification
    # 
    # @param user_token [String] Token representing the user to load/fetch loads for
    # @param load_token [String] Load token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @return [ResendLoadNotification200Response]
    def resend_load_notification(user_token, load_token, opts = {})
      data, _status_code, _headers = resend_load_notification_with_http_info(user_token, load_token, opts)
      data
    end

    # Resend Load Notification
    # 
    # @param user_token [String] Token representing the user to load/fetch loads for
    # @param load_token [String] Load token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @return [Array<(ResendLoadNotification200Response, Integer, Hash)>] ResendLoadNotification200Response data, response status code and response headers
    def resend_load_notification_with_http_info(user_token, load_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadApi.resend_load_notification ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling LoadApi.resend_load_notification"
      end
      # verify the required parameter 'load_token' is set
      if @api_client.config.client_side_validation && load_token.nil?
        fail ArgumentError, "Missing the required parameter 'load_token' when calling LoadApi.resend_load_notification"
      end
      # resource path
      local_var_path = '/load/{user_token}'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'load_token'] = load_token

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResendLoadNotification200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"LoadApi.resend_load_notification",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadApi#resend_load_notification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
