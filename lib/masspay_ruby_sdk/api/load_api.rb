=begin
#MassPay API

#MassPay API

The version of the OpenAPI document: 0.1.4
Contact: support@masspay.io
Generated by: MassPay Inc.
OpenAPI Generator version: 6.5.0
=end

require 'cgi'

module MassPayRubySdk
  class LoadApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Reverse a user load
    # This **DELETE** endpoint is used to reverse a load transaction that was already processed, allowing you to remove funds from a user's wallet. <br> To use this endpoint, you need to provide the `user_token` as a parameter in the URL Path, and the load_token as a parameter in the Query string. <br> The endpoint will then attempt to reverse the specified load transaction. If the load is still in scheduled status, it will be marked as cancelled.
    # @param user_token [String] Token representing the user to load/fetch loads for
    # @param load_token [String] Load token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @return [nil]
    def cancel_user_load(user_token, load_token, opts = {})
      cancel_user_load_with_http_info(user_token, load_token, opts)
      nil
    end

    # Reverse a user load
    # This **DELETE** endpoint is used to reverse a load transaction that was already processed, allowing you to remove funds from a user&#39;s wallet. &lt;br&gt; To use this endpoint, you need to provide the &#x60;user_token&#x60; as a parameter in the URL Path, and the load_token as a parameter in the Query string. &lt;br&gt; The endpoint will then attempt to reverse the specified load transaction. If the load is still in scheduled status, it will be marked as cancelled.
    # @param user_token [String] Token representing the user to load/fetch loads for
    # @param load_token [String] Load token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def cancel_user_load_with_http_info(user_token, load_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadApi.cancel_user_load ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling LoadApi.cancel_user_load"
      end
      # verify the required parameter 'load_token' is set
      if @api_client.config.client_side_validation && load_token.nil?
        fail ArgumentError, "Missing the required parameter 'load_token' when calling LoadApi.cancel_user_load"
      end
      # resource path
      local_var_path = '/load/{user_token}'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'load_token'] = load_token

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"LoadApi.cancel_user_load",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadApi#cancel_user_load\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add autopay rule
    # This **POST** endpoint is used to add an autopay rule that will initiate a payout whenever the provided wallet token is loaded. <br> You can use this endpoint to create an autopay rule that automatically sends a percentage of incoming load to a specific destination. <br> To use this endpoint, you need to provide the `user_token` and `wallet_token` as required parameters in the URL Path, and the `destination_token` and percentage of incoming load that should be autopaid to the `destination_token` in the request Body. <br> The response will include a JSON object containing the details of the created autopay rule, including the token, `destination_token` and percentage.
    # @param user_token [String] Token representing the user who owns the wallet
    # @param wallet_token [String] Token representing the wallet
    # @param [Hash] opts the optional parameters
    # @option opts [AutopayRule] :autopay_rule Autopay rule configuration
    # @return [AutopayResp]
    def create_autopay_rule(user_token, wallet_token, opts = {})
      data, _status_code, _headers = create_autopay_rule_with_http_info(user_token, wallet_token, opts)
      data
    end

    # Add autopay rule
    # This **POST** endpoint is used to add an autopay rule that will initiate a payout whenever the provided wallet token is loaded. &lt;br&gt; You can use this endpoint to create an autopay rule that automatically sends a percentage of incoming load to a specific destination. &lt;br&gt; To use this endpoint, you need to provide the &#x60;user_token&#x60; and &#x60;wallet_token&#x60; as required parameters in the URL Path, and the &#x60;destination_token&#x60; and percentage of incoming load that should be autopaid to the &#x60;destination_token&#x60; in the request Body. &lt;br&gt; The response will include a JSON object containing the details of the created autopay rule, including the token, &#x60;destination_token&#x60; and percentage.
    # @param user_token [String] Token representing the user who owns the wallet
    # @param wallet_token [String] Token representing the wallet
    # @param [Hash] opts the optional parameters
    # @option opts [AutopayRule] :autopay_rule Autopay rule configuration
    # @return [Array<(AutopayResp, Integer, Hash)>] AutopayResp data, response status code and response headers
    def create_autopay_rule_with_http_info(user_token, wallet_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadApi.create_autopay_rule ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling LoadApi.create_autopay_rule"
      end
      # verify the required parameter 'wallet_token' is set
      if @api_client.config.client_side_validation && wallet_token.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_token' when calling LoadApi.create_autopay_rule"
      end
      # resource path
      local_var_path = '/wallet/{user_token}/{wallet_token}/autopay'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s)).sub('{' + 'wallet_token' + '}', CGI.escape(wallet_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'autopay_rule'])

      # return_type
      return_type = opts[:debug_return_type] || 'AutopayResp'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"LoadApi.create_autopay_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadApi#create_autopay_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete autopay rule
    # This **DELETE** endpoint is used to delete an existing autopay rule. <br> You can use this endpoint to remove an autopay rule that is no longer needed. <br> To use this endpoint, you need to provide the `user_token` and `wallet_token` as required parameters in the URL Path, and the token of the autopay rule you wish to delete in the request Body. <br> The response will include a message indicating the success of the deletion.
    # @param user_token [String] Token representing the user who owns the wallet
    # @param wallet_token [String] Token representing the wallet
    # @param token [String] Autopay token to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_autopay_rule(user_token, wallet_token, token, opts = {})
      delete_autopay_rule_with_http_info(user_token, wallet_token, token, opts)
      nil
    end

    # Delete autopay rule
    # This **DELETE** endpoint is used to delete an existing autopay rule. &lt;br&gt; You can use this endpoint to remove an autopay rule that is no longer needed. &lt;br&gt; To use this endpoint, you need to provide the &#x60;user_token&#x60; and &#x60;wallet_token&#x60; as required parameters in the URL Path, and the token of the autopay rule you wish to delete in the request Body. &lt;br&gt; The response will include a message indicating the success of the deletion.
    # @param user_token [String] Token representing the user who owns the wallet
    # @param wallet_token [String] Token representing the wallet
    # @param token [String] Autopay token to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_autopay_rule_with_http_info(user_token, wallet_token, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadApi.delete_autopay_rule ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling LoadApi.delete_autopay_rule"
      end
      # verify the required parameter 'wallet_token' is set
      if @api_client.config.client_side_validation && wallet_token.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_token' when calling LoadApi.delete_autopay_rule"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling LoadApi.delete_autopay_rule"
      end
      # resource path
      local_var_path = '/wallet/{user_token}/{wallet_token}/autopay'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s)).sub('{' + 'wallet_token' + '}', CGI.escape(wallet_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"LoadApi.delete_autopay_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadApi#delete_autopay_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all autopay rules
    # This **GET** endpoint is used to retrieve all autopay rules currently applied to the provided wallet token. <br> You can use this endpoint to obtain information about the autopay rules associated with the wallet. <br> To use this endpoint, you need to provide the `user_token` and `wallet_token` as required parameters in the URL Path. <br> The response will include a JSON array containing details for each autopay rule, including the token, `destination_token` and percentage.
    # @param user_token [String] Token representing the user who owns the wallet
    # @param wallet_token [String] Token representing the wallet
    # @param [Hash] opts the optional parameters
    # @return [Array<AutopayResp>]
    def get_autopay_rules(user_token, wallet_token, opts = {})
      data, _status_code, _headers = get_autopay_rules_with_http_info(user_token, wallet_token, opts)
      data
    end

    # Get all autopay rules
    # This **GET** endpoint is used to retrieve all autopay rules currently applied to the provided wallet token. &lt;br&gt; You can use this endpoint to obtain information about the autopay rules associated with the wallet. &lt;br&gt; To use this endpoint, you need to provide the &#x60;user_token&#x60; and &#x60;wallet_token&#x60; as required parameters in the URL Path. &lt;br&gt; The response will include a JSON array containing details for each autopay rule, including the token, &#x60;destination_token&#x60; and percentage.
    # @param user_token [String] Token representing the user who owns the wallet
    # @param wallet_token [String] Token representing the wallet
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AutopayResp>, Integer, Hash)>] Array<AutopayResp> data, response status code and response headers
    def get_autopay_rules_with_http_info(user_token, wallet_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadApi.get_autopay_rules ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling LoadApi.get_autopay_rules"
      end
      # verify the required parameter 'wallet_token' is set
      if @api_client.config.client_side_validation && wallet_token.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_token' when calling LoadApi.get_autopay_rules"
      end
      # resource path
      local_var_path = '/wallet/{user_token}/{wallet_token}/autopay'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s)).sub('{' + 'wallet_token' + '}', CGI.escape(wallet_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AutopayResp>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"LoadApi.get_autopay_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadApi#get_autopay_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get history of loads by user token
    # This **GET** endpoint is used to retrieve a transaction history of all loads that were made to the provided user token, including scheduled loads. <br> You can use this endpoint to obtain a comprehensive history of loads for the user token, allowing you to track and analyze their incoming payments over time. <br> To use this endpoint, you need to provide the `user_token` as a parameter in the URL Path. <br> The endpoint will then return a JSON array of load transactions, each including transactions details.
    # @param user_token [String] The user token that needs to be fetched.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @return [Array<Loads>]
    def get_user_loads_by_token(user_token, opts = {})
      data, _status_code, _headers = get_user_loads_by_token_with_http_info(user_token, opts)
      data
    end

    # Get history of loads by user token
    # This **GET** endpoint is used to retrieve a transaction history of all loads that were made to the provided user token, including scheduled loads. &lt;br&gt; You can use this endpoint to obtain a comprehensive history of loads for the user token, allowing you to track and analyze their incoming payments over time. &lt;br&gt; To use this endpoint, you need to provide the &#x60;user_token&#x60; as a parameter in the URL Path. &lt;br&gt; The endpoint will then return a JSON array of load transactions, each including transactions details.
    # @param user_token [String] The user token that needs to be fetched.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @return [Array<(Array<Loads>, Integer, Hash)>] Array<Loads> data, response status code and response headers
    def get_user_loads_by_token_with_http_info(user_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadApi.get_user_loads_by_token ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling LoadApi.get_user_loads_by_token"
      end
      # resource path
      local_var_path = '/load/{user_token}'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Loads>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"LoadApi.get_user_loads_by_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadApi#get_user_loads_by_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate a load transaction
    # This **POST** endpoint is used to initiate a load transaction, allowing you to add funds to a user token's wallet. <br> To use this endpoint, you need to provide the `user_token` as a parameter in the URL Path. You also need to provide the `client_load_id`, `source_token`, and amount as JSON parameters in the Request Body. The `client_load_id` is a unique identifier for the transaction that you can use to track it, while the `source_token` is the token or account from which the funds will be loaded. The amount parameter specifies the amount of funds to be loaded into the user's wallet. <br> The response will contain a JSON object indicating the status of the load transaction and any relevant details.
    # @param user_token [String] Token representing the user to load
    # @param load_txn [LoadTxn] Load information
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @return [LoadTxnResp]
    def load_user(user_token, load_txn, opts = {})
      data, _status_code, _headers = load_user_with_http_info(user_token, load_txn, opts)
      data
    end

    # Initiate a load transaction
    # This **POST** endpoint is used to initiate a load transaction, allowing you to add funds to a user token&#39;s wallet. &lt;br&gt; To use this endpoint, you need to provide the &#x60;user_token&#x60; as a parameter in the URL Path. You also need to provide the &#x60;client_load_id&#x60;, &#x60;source_token&#x60;, and amount as JSON parameters in the Request Body. The &#x60;client_load_id&#x60; is a unique identifier for the transaction that you can use to track it, while the &#x60;source_token&#x60; is the token or account from which the funds will be loaded. The amount parameter specifies the amount of funds to be loaded into the user&#39;s wallet. &lt;br&gt; The response will contain a JSON object indicating the status of the load transaction and any relevant details.
    # @param user_token [String] Token representing the user to load
    # @param load_txn [LoadTxn] Load information
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @return [Array<(LoadTxnResp, Integer, Hash)>] LoadTxnResp data, response status code and response headers
    def load_user_with_http_info(user_token, load_txn, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadApi.load_user ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling LoadApi.load_user"
      end
      # verify the required parameter 'load_txn' is set
      if @api_client.config.client_side_validation && load_txn.nil?
        fail ArgumentError, "Missing the required parameter 'load_txn' when calling LoadApi.load_user"
      end
      # resource path
      local_var_path = '/load/{user_token}'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(load_txn)

      # return_type
      return_type = opts[:debug_return_type] || 'LoadTxnResp'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"LoadApi.load_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadApi#load_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resend Load Notification
    # This **PUT** endpoint is used to resend a load notification to the user associated with the provided `user_token` for a specific load transaction. <br> You can use this endpoint to help ensure that users are notified promptly and accurately of any incoming funds or other important payment events. <br> To use this endpoint, you need to provide the `user_token` as a parameter in the URL Path, and the `load_token` as a parameter in the Query string. The endpoint will then resend a notification to the user for the specified load transaction. <br> The response will contain a JSON object indicating the status of the request.
    # @param user_token [String] Token representing the user to load/fetch loads for
    # @param load_token [String] Load token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @return [ResendBalanceNotification200Response]
    def load_user_token_put(user_token, load_token, opts = {})
      data, _status_code, _headers = load_user_token_put_with_http_info(user_token, load_token, opts)
      data
    end

    # Resend Load Notification
    # This **PUT** endpoint is used to resend a load notification to the user associated with the provided &#x60;user_token&#x60; for a specific load transaction. &lt;br&gt; You can use this endpoint to help ensure that users are notified promptly and accurately of any incoming funds or other important payment events. &lt;br&gt; To use this endpoint, you need to provide the &#x60;user_token&#x60; as a parameter in the URL Path, and the &#x60;load_token&#x60; as a parameter in the Query string. The endpoint will then resend a notification to the user for the specified load transaction. &lt;br&gt; The response will contain a JSON object indicating the status of the request.
    # @param user_token [String] Token representing the user to load/fetch loads for
    # @param load_token [String] Load token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @return [Array<(ResendBalanceNotification200Response, Integer, Hash)>] ResendBalanceNotification200Response data, response status code and response headers
    def load_user_token_put_with_http_info(user_token, load_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadApi.load_user_token_put ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling LoadApi.load_user_token_put"
      end
      # verify the required parameter 'load_token' is set
      if @api_client.config.client_side_validation && load_token.nil?
        fail ArgumentError, "Missing the required parameter 'load_token' when calling LoadApi.load_user_token_put"
      end
      # resource path
      local_var_path = '/load/{user_token}'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'load_token'] = load_token

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResendBalanceNotification200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"LoadApi.load_user_token_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadApi#load_user_token_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resend Balance Notification
    # 
    # @param user_token [String] Token representing the user who owns the wallet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @option opts [String] :wallet_token Optional wallet token. If none is provided, select the first wallet available
    # @return [ResendBalanceNotification200Response]
    def resend_balance_notification(user_token, opts = {})
      data, _status_code, _headers = resend_balance_notification_with_http_info(user_token, opts)
      data
    end

    # Resend Balance Notification
    # 
    # @param user_token [String] Token representing the user who owns the wallet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @option opts [String] :wallet_token Optional wallet token. If none is provided, select the first wallet available
    # @return [Array<(ResendBalanceNotification200Response, Integer, Hash)>] ResendBalanceNotification200Response data, response status code and response headers
    def resend_balance_notification_with_http_info(user_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadApi.resend_balance_notification ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling LoadApi.resend_balance_notification"
      end
      # resource path
      local_var_path = '/wallet/{user_token}'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'wallet_token'] = opts[:'wallet_token'] if !opts[:'wallet_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResendBalanceNotification200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"LoadApi.resend_balance_notification",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadApi#resend_balance_notification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
