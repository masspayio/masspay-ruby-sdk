=begin
#MassPay API

#MassPay API

The version of the OpenAPI document: 0.1.4
Contact: support@masspay.io
Generated by: MassPay Inc.
OpenAPI Generator version: 6.5.0
=end

require 'cgi'

module MassPayRubySdk
  class PayoutApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Commit payout transaction
    # Commits a previously initiated transaction.
    # @param user_token [String] Token representing the user to pay out
    # @param payout_token [String] Token representing the trsanaction. Retrieved from &#x60;/payout/{user_token}&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @return [PayoutTxnCommitResp]
    def commit_payout_txn(user_token, payout_token, opts = {})
      data, _status_code, _headers = commit_payout_txn_with_http_info(user_token, payout_token, opts)
      data
    end

    # Commit payout transaction
    # Commits a previously initiated transaction.
    # @param user_token [String] Token representing the user to pay out
    # @param payout_token [String] Token representing the trsanaction. Retrieved from &#x60;/payout/{user_token}&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @return [Array<(PayoutTxnCommitResp, Integer, Hash)>] PayoutTxnCommitResp data, response status code and response headers
    def commit_payout_txn_with_http_info(user_token, payout_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayoutApi.commit_payout_txn ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling PayoutApi.commit_payout_txn"
      end
      # verify the required parameter 'payout_token' is set
      if @api_client.config.client_side_validation && payout_token.nil?
        fail ArgumentError, "Missing the required parameter 'payout_token' when calling PayoutApi.commit_payout_txn"
      end
      # resource path
      local_var_path = '/payout/{user_token}/{payout_token}'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s)).sub('{' + 'payout_token' + '}', CGI.escape(payout_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PayoutTxnCommitResp'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"PayoutApi.commit_payout_txn",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayoutApi#commit_payout_txn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get status of a payout by payout token
    # Retrieves information including status update for a payout token
    # @param user_token [String] Token representing the user to pay out
    # @param payout_token [String] Token representing the trsanaction. Retrieved from &#x60;/payout/{user_token}&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @option opts [Boolean] :force_status_update Attempts to get an updated status update from the payout destination (default to false)
    # @return [PayoutTxnResp]
    def get_payout_status(user_token, payout_token, opts = {})
      data, _status_code, _headers = get_payout_status_with_http_info(user_token, payout_token, opts)
      data
    end

    # Get status of a payout by payout token
    # Retrieves information including status update for a payout token
    # @param user_token [String] Token representing the user to pay out
    # @param payout_token [String] Token representing the trsanaction. Retrieved from &#x60;/payout/{user_token}&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @option opts [Boolean] :force_status_update Attempts to get an updated status update from the payout destination (default to false)
    # @return [Array<(PayoutTxnResp, Integer, Hash)>] PayoutTxnResp data, response status code and response headers
    def get_payout_status_with_http_info(user_token, payout_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayoutApi.get_payout_status ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling PayoutApi.get_payout_status"
      end
      # verify the required parameter 'payout_token' is set
      if @api_client.config.client_side_validation && payout_token.nil?
        fail ArgumentError, "Missing the required parameter 'payout_token' when calling PayoutApi.get_payout_status"
      end
      # resource path
      local_var_path = '/payout/{user_token}/{payout_token}'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s)).sub('{' + 'payout_token' + '}', CGI.escape(payout_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'force_status_update'] = opts[:'force_status_update'] if !opts[:'force_status_update'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PayoutTxnResp'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"PayoutApi.get_payout_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayoutApi#get_payout_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get transaction confirmation details
    # Obtains a PDF with all the details of the payout
    # @param user_token [String] Token representing the user to pay out
    # @param payout_token [String] Token representing the trsanaction. Retrieved from &#x60;/payout/{user_token}&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @return [GetTransactionConfirmationDetails200Response]
    def get_transaction_confirmation_details(user_token, payout_token, opts = {})
      data, _status_code, _headers = get_transaction_confirmation_details_with_http_info(user_token, payout_token, opts)
      data
    end

    # Get transaction confirmation details
    # Obtains a PDF with all the details of the payout
    # @param user_token [String] Token representing the user to pay out
    # @param payout_token [String] Token representing the trsanaction. Retrieved from &#x60;/payout/{user_token}&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @return [Array<(GetTransactionConfirmationDetails200Response, Integer, Hash)>] GetTransactionConfirmationDetails200Response data, response status code and response headers
    def get_transaction_confirmation_details_with_http_info(user_token, payout_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayoutApi.get_transaction_confirmation_details ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling PayoutApi.get_transaction_confirmation_details"
      end
      # verify the required parameter 'payout_token' is set
      if @api_client.config.client_side_validation && payout_token.nil?
        fail ArgumentError, "Missing the required parameter 'payout_token' when calling PayoutApi.get_transaction_confirmation_details"
      end
      # resource path
      local_var_path = '/payout/{user_token}/{payout_token}'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s)).sub('{' + 'payout_token' + '}', CGI.escape(payout_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTransactionConfirmationDetails200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"PayoutApi.get_transaction_confirmation_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayoutApi#get_transaction_confirmation_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get history of payouts by user token
    # Gets a list of all historical payouts for a provided user token.
    # @param user_token [String] The user token that needs to be fetched.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @option opts [Boolean] :include_payer_logos Whether to include the payers logo in base64 format.  (default to false)
    # @return [Array<PayoutTxnResp>]
    def get_user_payouts_by_token(user_token, opts = {})
      data, _status_code, _headers = get_user_payouts_by_token_with_http_info(user_token, opts)
      data
    end

    # Get history of payouts by user token
    # Gets a list of all historical payouts for a provided user token.
    # @param user_token [String] The user token that needs to be fetched.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @option opts [Boolean] :include_payer_logos Whether to include the payers logo in base64 format.  (default to false)
    # @return [Array<(Array<PayoutTxnResp>, Integer, Hash)>] Array<PayoutTxnResp> data, response status code and response headers
    def get_user_payouts_by_token_with_http_info(user_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayoutApi.get_user_payouts_by_token ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling PayoutApi.get_user_payouts_by_token"
      end
      # resource path
      local_var_path = '/payout/{user_token}'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include_payer_logos'] = opts[:'include_payer_logos'] if !opts[:'include_payer_logos'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PayoutTxnResp>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"PayoutApi.get_user_payouts_by_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayoutApi#get_user_payouts_by_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate a payout transaction
    # Initiates a payout transaction to a provided user token.
    # @param user_token [String] Token representing the user to pay out
    # @param payout_txn [PayoutTxn] Payout parameters for a quote
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @option opts [Float] :limit Limit amount for transaction amount + fee. If fee + amount are higher than the limit, the output will automatically adjust to maximize the possible amount sent
    # @return [PayoutTxnResp]
    def initiate_payout(user_token, payout_txn, opts = {})
      data, _status_code, _headers = initiate_payout_with_http_info(user_token, payout_txn, opts)
      data
    end

    # Initiate a payout transaction
    # Initiates a payout transaction to a provided user token.
    # @param user_token [String] Token representing the user to pay out
    # @param payout_txn [PayoutTxn] Payout parameters for a quote
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Unique key to prevent duplicate processing
    # @option opts [Float] :limit Limit amount for transaction amount + fee. If fee + amount are higher than the limit, the output will automatically adjust to maximize the possible amount sent
    # @return [Array<(PayoutTxnResp, Integer, Hash)>] PayoutTxnResp data, response status code and response headers
    def initiate_payout_with_http_info(user_token, payout_txn, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayoutApi.initiate_payout ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling PayoutApi.initiate_payout"
      end
      # verify the required parameter 'payout_txn' is set
      if @api_client.config.client_side_validation && payout_txn.nil?
        fail ArgumentError, "Missing the required parameter 'payout_txn' when calling PayoutApi.initiate_payout"
      end
      pattern = Regexp.new(/^[\d.]+$/)
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"limit\"]' when calling PayoutApi.initiate_payout, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/payout/{user_token}'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(payout_txn)

      # return_type
      return_type = opts[:debug_return_type] || 'PayoutTxnResp'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'AUTHORIZER_NAME']

      new_options = opts.merge(
        :operation => :"PayoutApi.initiate_payout",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayoutApi#initiate_payout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
